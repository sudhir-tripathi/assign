AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy Flask App using ECS Fargate with CI/CD in Mumbai (ap-south-1) Region

Parameters:
  GitHubOwner:
    Type: String
    Description: GitHub username or organization
  GitHubRepo:
    Type: String
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to build from
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    Description: GitHub personal access token for CodePipeline integration

Resources:
  # VPC and Networking
  ManeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: ManeVPC

  ManeInternetGateway:
    Type: AWS::EC2::InternetGateway

  ManeAttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ManeVPC
      InternetGatewayId: !Ref ManeInternetGateway

  ManePublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ManeVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ManePublicSubnet1

  ManePublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ManeVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ManePublicSubnet2

  ManePrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ManeVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: ap-south-1a
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ManePrivateSubnet1

  ManePrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ManeVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: ap-south-1b
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: ManePrivateSubnet2

  ManeNatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ManeNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ManeNatGatewayEIP.AllocationId
      SubnetId: !Ref ManePublicSubnet1

  ManeRouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ManeVPC

  ManeRoutePublic:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ManeRouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ManeInternetGateway

  ManeRouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ManeVPC

  ManeRoutePrivate:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref ManeRouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref ManeNatGateway

  ManePublicSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ManeRouteTablePublic
      SubnetId: !Ref ManePublicSubnet1

  ManePublicSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ManeRouteTablePublic
      SubnetId: !Ref ManePublicSubnet2

  ManePrivateSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ManeRouteTablePrivate
      SubnetId: !Ref ManePrivateSubnet1

  ManePrivateSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ManeRouteTablePrivate
      SubnetId: !Ref ManePrivateSubnet2

  # ECR Repository
  ManeECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: flask-ecs-app

  # ECS Cluster
  ManeCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ManeCluster

  # IAM Role for ECS Task Execution
  ManeTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # CloudWatch Logs
  ManeLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/mane-flask-app
      RetentionInDays: 7

  # ECS Task Definition
  ManeECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities: [FARGATE]
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      ExecutionRoleArn: !GetAtt ManeTaskExecutionRole.Arn
      ContainerDefinitions:
        - Name: flask-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/flask-ecs-app:latest"
          PortMappings:
            - ContainerPort: 5000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ManeLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: flask

  # Security Groups
  ManeALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP from internet
      VpcId: !Ref ManeVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ManeECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from ALB to ECS
      VpcId: !Ref ManeVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref ManeALBSecurityGroup

  # Application Load Balancer
  ManeALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ManeALB
      Scheme: internet-facing
      Subnets:
        - !Ref ManePublicSubnet1
        - !Ref ManePublicSubnet2
      SecurityGroups:
        - !Ref ManeALBSecurityGroup

  ManeTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref ManeVPC
      Port: 5000
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200

  ManeALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ManeALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ManeTargetGroup

  # ECS Fargate Service
  ManeECSService:
    Type: AWS::ECS::Service
    DependsOn: ManeALBListener
    Properties:
      Cluster: !Ref ManeCluster
      LaunchType: FARGATE
      DesiredCount: 2
      TaskDefinition: !Ref ManeECSTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets:
            - !Ref ManePrivateSubnet1
            - !Ref ManePrivateSubnet2
          SecurityGroups:
            - !Ref ManeECSSecurityGroup
      LoadBalancers:
        - ContainerName: flask-container
          ContainerPort: 5000
          TargetGroupArn: !Ref ManeTargetGroup

  # Auto Scaling
  ManeECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  ManeScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      ResourceId: !Sub "service/${ManeCluster}/${ManeECSService}"
      RoleARN: !GetAtt ManeECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ManeScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ManeCPUScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ManeScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 60.0

  # S3 Bucket for Pipeline Artifacts
  ManePipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub mane-pipeline-artifacts-${AWS::AccountId}

  # CodeBuild
  ManeCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:*"
                  - "logs:*"
                  - "cloudwatch:*"
                  - "ecs:UpdateService"
                  - "ecs:DescribeServices"
                  - "iam:PassRole"
                Resource: "*"

  ManeCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ManeBuildProject
      ServiceRole: !GetAtt ManeCodeBuildRole.Arn
      Source:
        Type: GITHUB
        Location: !Sub https://github.com/${GitHubOwner}/${GitHubRepo}.git
        BuildSpec: buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION
            Value: !Ref AWS::Region
      Artifacts:
        Type: NO_ARTIFACTS

  # CodePipeline
  ManePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipelineFullAccess

  ManeCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: ManePipeline
      RoleArn: !GetAtt ManePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ManePipelineArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
        - Name: Build
          Actions:
            - Name: BuildDockerImage
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ProjectName: !Ref ManeCodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput

Outputs:
  VPCId:
    Value: !Ref ManeVPC
  PublicSubnet1:
    Value: !Ref ManePublicSubnet1
  PrivateSubnet1:
    Value: !Ref ManePrivateSubnet1
  ClusterName:
    Value: !Ref ManeCluster
  LoadBalancerDNSName:
    Description: Public DNS of the Application Load Balancer
    Value: !GetAtt ManeALB.DNSName
