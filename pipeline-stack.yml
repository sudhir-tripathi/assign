# pipeline-stack.yml
AWSTemplateFormatVersion: '2010-09-09'
Description: "Mane Pipeline Stack: Creates CodePipeline, CodeBuild, S3 Artifact Bucket, IAM Roles - Mumbai Region (ap-south-1)"

Parameters:
  AppStackName:
    Type: String
    Description: Name of the CloudFormation stack that created the application resources (e.g., mane-app-stack).
    Default: mane-app-stack # Provide the actual name of your app stack
  GitHubOwner:
    Type: String
    Description: GitHub username or organization name
    Default: sudhir-tripathi
  GitHubRepo:
    Type: String
    Description: GitHub repository name
    Default: assign
  GitHubBranch:
    Type: String
    Default: main
    Description: GitHub branch to trigger the pipeline from
  GitHubOAuthToken:
    Type: String
    NoEcho: true
    Description: (Required) GitHub personal access token (repo or public_repo scope needed)
    # IMPORTANT: Store this securely (e.g., Secrets Manager) in production.
    # Default: "ghp_..." # Avoid hardcoding default tokens

Resources:
  ManePipelineArtifactsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain # Or Delete if you don't need artifacts after stack deletion
    Properties:
      BucketName: !Sub "mane-pipeline-artifacts-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}" # Unique bucket name
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration: # Optional: Clean up old artifacts
        Rules:
          - Id: ExpireOldArtifacts
            Status: Enabled
            ExpirationInDays: 90 # Adjust as needed
            NoncurrentVersionExpirationInDays: 30 # Adjust as needed

  ManeCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-CodeBuildRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow # S3 permissions for pipeline artifacts
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !GetAtt ManePipelineArtifactsBucket.Arn
                  - !Sub "${ManePipelineArtifactsBucket.Arn}/*"
              - Effect: Allow # Logs Permissions
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ManeCodeBuildProject}:*"
                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ManeCodeBuildProject}"
              - Effect: Allow # ECR Permissions
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:GetDownloadUrlForLayer # Needed by Docker client
                  - ecr:BatchGetImage # Needed by Docker client
                Resource: "*" # ECR actions often require "*" or specific repo ARN
                # You could restrict PutImage etc. to the specific ECR repo ARN:
                # Resource: !Sub "arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${Fn::ImportValue: ${AppStackName}-ECRRepositoryName}"
              - Effect: Allow # Allow CodeBuild to interact with VPC if needed (e.g., for tests) - Optional
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                Resource: "*"
              - Effect: Allow # Allow creating network interface permissions - Optional
                Action:
                  - ec2:CreateNetworkInterfacePermission
                Resource: !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*"
                Condition:
                  StringEquals:
                    ec2:Subnet: # Restrict to specific subnets if CodeBuild runs in VPC
                      - !ImportValue
                          Fn::Sub: "${AppStackName}-NetworkStackName-PrivateSubnet1Id" # Example if needed
                      - !ImportValue
                          Fn::Sub: "${AppStackName}-NetworkStackName-PrivateSubnet2Id" # Example if needed
                    ec2:AuthorizedService: codebuild.amazonaws.com

  ManeCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${AWS::StackName}-BuildProject"
      ServiceRole: !GetAtt ManeCodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml # Assumes buildspec.yml is in the root of the source artifact
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:7.0 # Use a recent standard image
        PrivilegedMode: true # Required for Docker builds
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION # Changed from AWS_DEFAULT_REGION to match buildspec
            Value: !Ref AWS::Region
          - Name: ECR_REPOSITORY_NAME # Pass Repo Name instead of full URI
            Value: !ImportValue
              Fn::Sub: "${AppStackName}-ECRRepositoryName"
          # IMAGE_TAG is derived within buildspec.yml from CODEBUILD_RESOLVED_SOURCE_VERSION
          - Name: CONTAINER_NAME # Pass container name for imagedefinitions.json
            Value: flask-container # Should match ContainerDefinition Name in App Stack Task Def
      Artifacts:
        Type: CODEPIPELINE # Output artifact for CodePipeline Deploy stage
      LogsConfig: # Explicitly configure logs
        CloudWatchLogs:
          Status: ENABLED
          # GroupName: # Optional: defaults to /aws/codebuild/<project-name>
          # StreamName: # Optional: defaults to build-id

  ManePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-PipelineRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow # S3 permissions for artifacts
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - !GetAtt ManePipelineArtifactsBucket.Arn
                  - !Sub "${ManePipelineArtifactsBucket.Arn}/*"
              - Effect: Allow # CodeBuild interaction
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt ManeCodeBuildProject.Arn # Scope to specific project
              # - Effect: Allow # GitHub Source Action (V1 needs token, V2 needs connection)
              #   Action:
              #     - codestar-connections:UseConnection # Needed if using CodeStar Connections (GitHub V2 Source)
              #   Resource: "*" # Or specify connection ARN if known
              - Effect: Allow # ECS Deploy permissions
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: !Sub # Scope to the specific ECS service ARN
                  - "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:service/${ClusterName}/${ServiceName}"
                  - ClusterName: !ImportValue
                      Fn::Sub: "${AppStackName}-ClusterName"
                    ServiceName: !ImportValue
                      Fn::Sub: "${AppStackName}-ECSServiceName"
              - Effect: Allow # Allow passing roles (e.g., to ECS Deploy action if it needed one)
                Action:
                  - iam:PassRole
                Resource: "*" # Be cautious, scope if possible
                Condition:
                   StringEqualsIfExists:
                     iam:PassedToService: # Restrict which services the role can be passed to
                       - ecs-tasks.amazonaws.com
                       - codebuild.amazonaws.com

  ManeCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${AWS::StackName}-Pipeline"
      RoleArn: !GetAtt ManePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ManePipelineArtifactsBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1 # Use Version 2 if using CodeStar Connections
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken # Uses the token provided during deployment
                PollForSourceChanges: true # Set to false if using Webhooks
                # ConnectionArn: !Ref GitHubConnectionArn # Use if Provider=GitHub, Version=2
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput # Artifact containing imagedefinitions.json
              Configuration:
                ProjectName: !Ref ManeCodeBuildProject
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: ECS
                Version: 1
              InputArtifacts:
                - Name: BuildOutput # Use the artifact from the Build stage
              Configuration:
                ClusterName: !ImportValue # Import Cluster Name
                  Fn::Sub: "${AppStackName}-ClusterName"
                ServiceName: !ImportValue # Import Service Name
                  Fn::Sub: "${AppStackName}-ECSServiceName"
                FileName: imagedefinitions.json # File produced by buildspec
              RunOrder: 1

Outputs:
  PipelineName:
    Description: Name of the CodePipeline
    Value: !Ref ManeCodePipeline
    Export:
      Name: !Sub "${AWS::StackName}-PipelineName"

  PipelineArtifactBucketName:
    Description: Name of the S3 bucket for pipeline artifacts
    Value: !Ref ManePipelineArtifactsBucket
    Export:
      Name: !Sub "${AWS::StackName}-PipelineArtifactBucketName"
